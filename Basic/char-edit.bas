10 REM CHARACTER EDIT BY JUSTIN BALDOCK 2022
20 REM HTTPS://GITHUB.COM/JUSTINBALDOCK/X16-SPRITEEDIT
30 GOSUB 60000: REM SETUP VARIABLES AND FUNCTIONS
35 GOSUB 40000: REM SETUP GRAPHICS
50 GOSUB 30000: REM DRAW CHAR-SET

100 REM MAIN LOOP
110 REM GET STATUS
120 REM GET CURSOR AND UPDATE
130 GOSUB 300: REM PROCESS KEYBOARD 
140 GOTO 100
150 END

300 REM FUNCTION GET KEYBOARD AND PROCESS
310 GET KP$: REM KP$= KEY PRESS
320 REM PROCESS CURSOR KEYS
330 IF KP$=CHR$(157) THEN CX=-1: CY=0: GOSUB 21000: REM LEFT
340 IF KP$=CHR$(29) THEN CX=1: CY=0: GOSUB 21000: REM RIGHT
350 IF KP$=CHR$(17) THEN CX=0: CY=1: GOSUB 21000: REM DOWN
360 IF KP$=CHR$(145) THEN CX=0: CY=-1: GOSUB 21000: REM UP
370 REM PROCESS 1234 KEYS
380 IF KP$=CHR$(49) THEN UI=1: GOSUB 2000: REM 1 KEY
390 IF KP$=CHR$(50) THEN UI=2: GOSUB 2000: REM 2 KEY
400 IF KP$=CHR$(51) THEN UI=3: GOSUB 2000: REM 3 KEY
410 IF KP$=CHR$(52) THEN UI=4: GOSUB 2000: REM 4 KEY
420 REM ACTION KEYS
430 IF KP$=CHR$(32) THEN GOSUB 2100: REM SPACE KEY
450 REM CONTROL KEYS
460 IF KP$=CHR$(81) THEN END: REM Q KEY TO QUIT
470 IF KP$=CHR$(83) THEN : REM S KEY TO SAVE
480 IF KP$=CHR$(76) THEN : REM L KEY TO LOAD
490 RETURN

2000 REM MANAGE UI SELECTION
2010 IF UI=1 THEN GOSUB 20100
2020 IF UI=2 THEN GOSUB 20300
2030 IF UI=3 THEN GOSUB 20500
2040 IF UI=4 THEN GOSUB 20700
2040 RETURN

2100 REM MANAGE SPACE BAR
2110 IF UI=1 THEN GOSUB 2200
2120 IF UI=2 THEN GOSUB 2400
2130 IF UI=3 THEN GOSUB 2600
2140 RETURN

2200 REM SPACE BAR PRESSED IN CHAR BOX
2210 REM SPACE WILL TOGGLE "PIXEL" ON OR OFF
2220 X=CC%(0): Y=CC%(1)
2230 IF CB%(X,Y)=0 THEN CB%(X,Y)=1: GOTO 2250
2240 IF CB%(X,Y)=1 THEN CB%(X,Y)=0: GOTO 2250
2250 REM REDRAW CHAR
2260 GOSUB 32000
2270 REM UPDATE VERA
2280 GOSUB 23200
2290 RETURN

2400 REM SPACE BAR PRESSED IN FONT-SET BOX
2410 CS = FC%(0)+(FC%(1)*31)  
2420 VPOKE 0,$0A40,CS: REM DISPLAY CHAR ON CHAR-SET BOX TOP ROW
2430 VPOKE 0,$0A3C,32: REM CLEAR UI LAYER
2440 VPOKE 0,$4A3C,CS: VPOKE 0,$4A3D,01 :REM DISPLAY MOD CHAR
2450 GOSUB 23000: REM GET CHAR BITS
2460 GOSUB 32000: REM DISPLAY CHAR BITS ARRAY
2470 RETURN

2600 REM SPACE BAR PRESSED IN PALETTE BOX
2610 PS = (PC%(0)*8)+PC%(1)
2620 REM DISPLAY CURRENT SELECTED COLOUR ON BOX
2630 VPOKE 0,$0A4C, 32: VPOKE 0,$0A4D,0
2640 VPOKE 0,$0A4C,160: VPOKE 0,$0A4D,PS
2650 REM UPDATE COLOUR ON CHAR BOX
2660 GOSUB 32000
2670 REM UPDATE COLOUR ON FONT-SET BOX
2680 GOSUB 30000
2690 RETURN



20100 REM UPDATE UI = 1 = CHAR
20101 REM CURSOR IS ARRAY CC%(0)=X CC%(1)=Y
20110 REM SET CURSOR SPRITE
20120 X = (CC%(0)*8+8): REM SCREEN X
20130 Y = (CC%(1)*8+8): REM SCREEN Y
20140 VPOKE 1,CD+2,X: VPOKE 1,CD+3,0:REM X
20150 VPOKE 1,CD+4,Y: VPOKE 1,CD+5,0:REM Y 
20160 REM UPDATE BIT SELECTED
20170 BS = CC%(0)+(CC%(1)*7)
20180 RETURN

20300 REM UPDATE UI = 2 = FONT-SET
20301 REM CURSOR IS ARRAY FC%(0)=X FC%(1)=Y
20310 REM SET CURSOR SPRITE
20320 X = (FC%(0)*8) + 8 : REM SCREEN X
20330 Y = (FC%(1)*8) + 88: REM SCREEN Y
20340 VPOKE 1,CD+2,FN LB(X): VPOKE 1,CD+3,FN HB(X):REM X
20350 VPOKE 1,CD+4,FN LB(Y): VPOKE 1,CD+5,FN HB(Y):REM Y
20380 REM UPDATE CHAR SELECTED SO FUNCTIONS KNOW WHICH CHAR TO DRAW
20370 CS = FC%(0)+(FC%(1)*32)
20380 RETURN

20500 REM UPDATE UI = 3 = COLOUR PAL
20501 REM CURSOR IS ARRAY PC%
20510 REM SET CURSOR SPRITE
20520 X = (PC%(0)*8)+288: REM SCREEN X
20530 Y = (PC%(1)*8)+88 : REM SCREEN Y
20540 VPOKE 1,CD+2,FN LB(X): VPOKE 1,CD+3,FN HB(X):REM X
20550 VPOKE 1,CD+4,FN LB(Y): VPOKE 1,CD+5,FN HB(Y):REM Y
20560 REM UPDATE PALETTE SELECTED SO FUNCTIONS KNOW WHICH COLOUR TO USE
20570 PS = PC%(0)+(PC%(1)*8)
20580 RETURN

20700 REM UPDATE UI = 4 = SCRATCH-SPACE
20701 REM CURSOR IS ARRAY SC%
20710 REM SET CURSOR SPRITE
20720 X = (SC%(0)*8)+8  : REM SCREEN X
20730 Y = (SC%(1)*8)+160: REM SCREEN Y
20740 GOSUB 34000: REM UPDATE CURSOR SPRITE SCREEN X AND Y
20750 RETURN

21000 REM MANAGE CURSOR MOVEMENT
21010 IF UI=1 THEN GOSUB 21100
21020 IF UI=2 THEN GOSUB 21300
21030 IF UI=3 THEN GOSUB 21500
21090 RETURN

21100 REM UPDATE CHAR BOX CURSOR
21110 CC%(0)=CC%(0)+CX
21120 IF CC%(0)<0 THEN CC%(0)=0
21130 IF CC%(0)>7 THEN CC%(0)=7
21140 CC%(1)=CC%(1)+CY
21150 IF CC%(1)<0 THEN CC%(1)=0
21160 IF CC%(1)>7 THEN CC%(1)=7
21170 REM UPDATE SPRITE
21180 GOSUB 20100
21190 RETURN

21300 REM UPDATE FONT-SET BOX CURSOR
21310 FC%(0)=FC%(0)+CX
21320 IF FC%(0)<0 THEN FC%(0)=0
21330 IF FC%(0)>31 THEN FC%(0)=31
21340 FC%(1)=FC%(1)+CY
21350 IF FC%(1)<0 THEN FC%(1)=0
21360 IF FC%(1)>7 THEN FC%(1)=7
21370 REM UPDATE SPRITE
21380 GOSUB 20300
21390 RETURN

21500 REM UPDATE PALETTE BOX CURSOR
21510 PC%(0)=PC%(0)+CX
21520 IF PC%(0)<0 THEN PC%(0)=0
21530 IF PC%(0)>1 THEN PC%(0)=1
21540 PC%(1)=PC%(1)+CY
21550 IF PC%(1)<0 THEN PC%(1)=0
21560 IF PC%(1)>7 THEN PC%(1)=7
21570 REM UPDATE SPRITE
21580 GOSUB 20500

21700 REM UPDATE SCRATCH-SPACE BOX CURSOR

23000 REM UPDATE CHAR BITS FROM VERA
23001 REM REQUIRES CS = CHARACTER SELECT VARIABLE BE SET
23010 FOR Y = 0 TO 7
23030 NU=VPEEK($1,$5000+(CS*8)+Y)
23040 GOSUB 35000: REM CONVERT HEX TO 8 BITS
23050 FOR X = 0 TO 7
23060 CB%(X,Y)=BY%(X)
23070 NEXT X
23080 NEXT Y
23090 RETURN

23200 REM UPDATE VERA FROM CHAR BITS
23210 FOR Y = 0 TO 7
23220 REM GET THE 8 BITS / ROW OF DATA
23220 FOR X = 0 TO 7
23230 BY%(X)=CB%(X,Y)
23240 NEXT X
23250 GOSUB 35200 :REM CONVERT BIN DATA TO DEC NU
23260 VPOKE $1,$5000+(CS*8)+Y,NU
23270 NEXT Y
23280 RETURN

30000 REM DRAW FONT-SET
30010 FOR Y = 0 TO 7
30020 FOR X = 0 TO 31
30030 VPOKE 0,$4B02+(Y*$100)+(X*2),X+(32*Y)
30040 VPOKE 0,$4B02+(Y*$100)+(X*2)+1,PS
30050 NEXT X
30060 NEXT Y
30100 RETURN

32000 REM DRAW CHAR BITS ARRAY
32010 FOR Y = 0 TO 7
32020 FOR X = 0 TO 7
32030 IF CB%(X,Y)=1 THEN VPOKE 0,$4102+(X*2)+(Y*256),160
32040 IF CB%(X,Y)=0 THEN VPOKE 0,$4102+(X*2)+(Y*256),32
32050 VPOKE 0,$4102+(X*2)+(Y*256)+1,PS: REM SET COLOUR
32060 NEXT X
32070 NEXT Y
32080 RETURN

34000 REM UPDATE CURSOR SPRITE SCREEN X AND Y
34010 VPOKE 1,CD+2,FN LB(X): VPOKE 1,CD+3,FN HB(X):REM X
34020 VPOKE 1,CD+4,FN LB(Y): VPOKE 1,CD+5,FN HB(Y):REM Y
34030 RETURN

35000 REM CONVERT DEC TO BIN
35001 REM REQUIRES VALUE NU AND STORES 8-BITS IN ARRAY BY%
35002 REM **OVERWRITES** CONTENTS OF BY%
35020 BY%(0)=INT(NU/128): NU=NU-(INT(NU/128)*128)
35030 BY%(1)=INT(NU/64): NU=NU-(INT(NU/64)*64)
35040 BY%(2)=INT(NU/32): NU=NU-(INT(NU/32)*32)
35050 BY%(3)=INT(NU/16): NU=NU-(INT(NU/16)*16)
35060 BY%(4)=INT(NU/8): NU=NU-(INT(NU/8)*8)
35070 BY%(5)=INT(NU/4): NU=NU-(INT(NU/4)*4)
35080 BY%(6)=INT(NU/2): NU=NU-(INT(NU/2)*2)
35090 BY%(7)=INT(NU)
35100 RETURN

35200 REM CONVERT BIN TO DEC
35201 REM REQUIRES VALUE 8-BIT ARRAY BY% AND STORES VALUE IN NU
35202 REM **OVERWRITES** CONTENTS OF NU
35210 NU=0
35220 IF BY%(0)=1 THEN NU=NU+128
35230 IF BY%(1)=1 THEN NU=NU+64
35240 IF BY%(2)=1 THEN NU=NU+32
35250 IF BY%(3)=1 THEN NU=NU+16
35260 IF BY%(4)=1 THEN NU=NU+8
35270 IF BY%(5)=1 THEN NU=NU+4
35280 IF BY%(6)=1 THEN NU=NU+2
35290 IF BY%(7)=1 THEN NU=NU+1
35300 RETURN

40000 REM SETUP GRAPHICS
40010 SCREEN ($00): REM 40X30 SCREEN MODE
40020 POKE $9F29,%01110001: REM SET LAYER 0, LAYER 1 AND SPRITES ACTIVE
40030 GOSUB 42000: REM SETUP LAYER 0 - CUSTOM FONT-SET
40040 GOSUB 41000: REM SETUP LAYER 1 - UI
40050 GOSUB 43000: REM SETUP CURSOR SPRITE
40060 GOSUB 44000: REM DRAW PALETTE
40100 RETURN

41000 REM DRAW MAIN UI SCREEN ON LAYER 1
41020 OPEN 1,8,2,"CHAR-EDIT-IF,SEQ,R": REM INTERFACE FILE CREATED BY PETISDRAW
41030 GET#1,D$: IF ST=64 THEN RETURN
41040 GET#1,D$: REM FIRST 2 BYTES ARE NOT USEFUL
41050 FOR Y=0 TO 29
41060 FOR X=0 TO 79
41070 GET#1,D$
41080 VPOKE 0,$0000+((Y*256)+X),ASC(D$)
41090 NEXT X
41100 NEXT Y 
41110 CLOSE 1
41190 RETURN

42000 REM SETUP LAYER 0
42001 REM THIS IS THE LAYER WITH THE CUSTOM FONT-SET AND CHAR
42010 REM READ FONT-SET DATA FROM LAYER 1 AND COPY TO LAYER 0
42020 PRINT "LAYER 0 - LOADING CHARACTER SET"
42030 FOR X=0 TO 2047: REM COPY DEFAULT FONT-SET
42040 T = VPEEK (0,$F800+X)
42050 VPOKE 1,$5000+X,T
42060 PRINT ".";
42070 NEXT X
42080 CLS
42090 PRINT "LAYER 0 - CLEARING VRAM"
42100 FOR X=0 TO 10240: REM CLEAR MAP DATA
42110 VPOKE $0,$4000+(X*2),$20: VPOKE $0,$4000+(X*2)+1,$0
42120 REM VPOKE $0,$4000+(X*2),0: VPOKE $0,$4000+(X*2)+1,0
42130 PRINT ".";
42140 NEXT X
42150 CLS
42200 REM CUSTOMISE LAYER 0
42210 POKE $9F2D,%01100000: REM  SET 64 X 128 TILES, 
42220 POKE $9F2E,$20: REM BASE $4000
42230 POKE $9F2F,$A8: REM TILE BASE  $1,5000
42240 POKE $9F30,0: POKE $9F31,0
42250 POKE $9F32,0: POKE $9F33,0
42290 RETURN

43000 REM SETUP CURSOR SPRITE
43010 VPOKE 1,CD+0,%10000000: VPOKE 1,CD+1,%00000100: REM $9000
43020 VPOKE 1,CD+2,08: VPOKE 1,CD+3,00 :REM X
43030 VPOKE 1,CD+4,08: VPOKE 1,CD+5,00 :REM Y
43040 VPOKE 1,CD+6,%00001100: REM NO MASK, ON TOP ALL, NO FLIP
43050 VPOKE 1,CD+7,%00000000: REM 8X8 SPRITE WITH NO PAL OFFSET
43060 REM READ IN 4 BPP DATA
43070 FOR I = 0 TO 31
43080 READ D
43090 VPOKE 0,$9000+I,D
43100 NEXT I
43200 RETURN

44000 REM DRAW PALETTE
44010 FOR Y = 0 TO 7
44020 FOR X = 0 TO 1
44030 VPOKE 0,$0B49+(X*2)+(Y*256),(X*8)+(Y)
44040 VPOKE 0,$0B48+(X*2)+(Y*256),160
44050 NEXT X
44060 NEXT Y
44070 RETURN

34000 REM DRAW SCRATCH-SPACE

60000 REM VARIABLES
60005 REM WHICH UI BOX ARE WE IN?
60006 0=NONE, 1=CHAR, 2=FONT-SET, 3=SCRATCH, 4=PALETTE?
60010 LET UI = 1
60020 DIM CC%(1):REM = CHAR BOX CURSOR X,Y, CC%(0)=X CC%(1)=Y
60030 DIM FC%(1):REM = FONT BOX CURSOR X,Y FC%(0)=X, FC%(1)=Y
60040 DIM PC%(1):REM = PALETTE CURSOR X,Y PC%(0)=X PC%(1)=Y
60050 DIM SC%(1):REM = SCRATCH BOX CURSOR X,Y
60060 LET CD = $FC08: REM CD = CURSOR DATA
60070 LET CS = 0: REM CS = CHAR SELECTED IN FONT-SET BOX, 0-255
60080 LET BS = 0: REM BS = BIT SELECTED IN CHAR BOX 0-31
60090 DIM BY%(7):REM USED TO CONVERT DEC TO BIN, STORES 8-BIT BYTE
60100 LET CX = 0: LET CY = 0: REM USED TO STORE DIRECTION CURSOR MOVES
60110 DIM CB%(7,7):REM = CHAR BITS, 8X8 DATA BITS.
60120 LET PS = 1: REM = PALETTE SELECTED, DEFAULT IS WHITE
60130 PC%(0)=0: PC%(1)=1: REM SET DEFAULT PALETTE CURSOR START TO BE ON WHITE
60200 :
60500 REM FUNCTIONS 
60510 REM HIGHBYTE/HB FUNCTION, REQUIRES ADDRESS AD
60520 DEF FN HB(AD)=INT(AD/256)
60530 :
60540 REM LOWBYTE/LB FUNCTION, REQUIRES ADDRESS AD
60550 DEF FN LB(AD)=AD-256*INT(AD/256)
60560 :
60600 RETURN

62100 REM CUSROR SPRITE DATA 4 BPP
62110 DATA $A7,$77,$77,$7A
62120 DATA $70,$00,$00,$07
62130 DATA $70,$00,$00,$07
62140 DATA $70,$00,$00,$07
62150 DATA $70,$00,$00,$07
62160 DATA $70,$00,$00,$07
62170 DATA $70,$00,$00,$07
62180 DATA $A7,$77,$77,$7A
